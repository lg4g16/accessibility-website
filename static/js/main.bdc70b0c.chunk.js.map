{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ToggleContainer","styled","button","theme","gradient","toggleBorder","lightTheme","Boolean","window","location","hostname","match","ReactDOM","render","useState","darkMode","setDarkMode","largeText","setLargeText","dialogOpen","setDialogOpen","introRef","useRef","evernoteRef","trelloRef","assissRef","siteRef","furtherRef","settingsRef","scrollTo","ref","current","offsetTop","className","AppBar","position","Toolbar","Typography","variant","Button","color","onClick","style","minHeight","fontSize","title","src","width","height","alt","Dialog","open","keepMounted","onClose","DialogTitle","DialogContent","DialogActions","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdc70b0c.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport styled from 'styled-components'\nimport './App.css';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default () => {\n  const [darkMode, setDarkMode] = useState(false)\n  const [largeText, setLargeText] = useState(false)\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const introRef = useRef()\n  const evernoteRef = useRef()\n  const trelloRef = useRef()\n  const assissRef = useRef()\n  const siteRef = useRef()\n  const furtherRef = useRef()\n  const settingsRef = useRef()\n\n  const scrollTo = (ref) => window.scrollTo(0, ref.current.offsetTop - 80);\n\n  return (\n    <div className={darkMode ? 'app-dark' : 'app-light'}>\n      <AppBar position=\"fixed\" className='navbar'>\n        <Toolbar>\n          <Typography variant=\"h6\" className='title'>\n            Comp6219 Website\n          </Typography>\n          <Button color=\"inherit\" className={darkMode ? 'toggle-dark' : 'toggle-light'} onClick={() => scrollTo(introRef)}>Introduction</Button>\n          <Button color=\"inherit\" className={darkMode ? 'toggle-dark' : 'toggle-light'} onClick={() => scrollTo(evernoteRef)}>Evernote</Button>\n          <Button color=\"inherit\" className={darkMode ? 'toggle-dark' : 'toggle-light'} onClick={() => scrollTo(trelloRef)}>Trello</Button>\n          <Button color=\"inherit\" className={darkMode ? 'toggle-dark' : 'toggle-light'} onClick={() => scrollTo(assissRef)}>Assisstive Technologies</Button>\n          <Button color=\"inherit\" className={darkMode ? 'toggle-dark' : 'toggle-light'} onClick={() => scrollTo(siteRef)}>This Site</Button>\n          <Button color=\"inherit\" className={darkMode ? 'toggle-dark' : 'toggle-light'} onClick={() => scrollTo(furtherRef)}>Further Reading</Button>\n          <Button color=\"inherit\" className={darkMode ? 'toggle-dark' : 'toggle-light'} onClick={() => scrollTo(settingsRef)}>Settings</Button>\n        </Toolbar>\n      </AppBar>\n      <div style={{minHeight: \"64px\"}}/>\n      <div className={darkMode ? 'section-dark' : 'section-light'} style={{fontSize: largeText ? '30px': '20px'}} ref={introRef}>\n        <h2>Introduction</h2>\n        <p>\n          This website summarises the report completed for COMP6219 Designing Usable and Accessible Technologies. The study will focus on\n          one web application, Evernote Web, and one software application, Trello Desktop.\n        </p>\n        <h3>Usability Assessments</h3>\n        <p>\n          The usability of both Evernote and Trello is evaluated against Nielsen's definition of usability and the 10 usability heuristics\n        </p>\n        <h3>Accessibility Assessments</h3>\n        <p>\n          The accessibility of Evernote was assessed using Web2Access' tests to WCAG 2.1 standards, WAVE and ChromeVox Screen reader. Trello was\n          with against a colour contrast analyser and Windows screen reader. Both applications were also tested for keyboard access and miscelaneous \n          accessibility factors such as flashing for epilepsy and reading level.\n        </p>\n      </div>\n      <div className={darkMode ? 'section-dark' : 'section-light'} style={{fontSize: largeText ? '30px': '20px'}} ref={evernoteRef}>\n        <h2>Evernote</h2>\n\n        <h3>Usability</h3>\n        <p>\n          Overall, Trello has exceptional usability, primarily due to its learnability and flexability. Trello has a particularly minimalistic design and allows\n          the user to customise almost all areas within the view.\n        </p>\n\n        <h3>Accessibility</h3>\n        <p>this is the stuff for accessibility</p>\n      </div>\n      <div className={darkMode ? 'section-dark' : 'section-light'} style={{fontSize: largeText ? '30px': '20px'}} ref={trelloRef}>\n        <h2>Trello</h2>\n        <p>\n          Trello is a productivity application with the aim to organise lists of tasks or ideas. \n          Trello features boards which each contain lists, tasks and sub activities, \n          which in turn can be assigned labels, priorities, deadlines, sub-lists and notes. \n        </p>\n\n        <h3>Usability</h3>\n        <p>\n          this is the stuff for usability\n        </p>\n\n        <h3>Accessibility</h3>\n        <p>this is the stuff for accessibility</p>\n\n      </div>\n      <div className={darkMode ? 'section-dark' : 'section-light'} style={{fontSize: largeText ? '30px': '20px'}} ref={assissRef}>\n        <h1>Assisstive Technologies</h1>\n      </div>\n      <div className={darkMode ? 'section-dark' : 'section-light'} style={{fontSize: largeText ? '30px': '20px'}} ref={siteRef}>\n        <h1>This Site</h1>\n      </div>\n      <div className={darkMode ? 'section-dark' : 'section-light'} style={{fontSize: largeText ? '30px': '20px'}} ref={furtherRef}>\n        <h1>Further Reading</h1>\n      </div>\n      <div className={darkMode ? 'settings-dark' : 'settings-light'} style={{fontSize: largeText ? '30px': '20px'}} ref={settingsRef}>\n        <h1>Settings</h1>\n        <Button color=\"inherit\" className='settings-button' onClick={() => setLargeText(!largeText)}>Large Text Mode</Button>\n        <ToggleContainer title=\"Toggle Color Mode\" lightTheme={!darkMode} onClick={() => setDarkMode(!darkMode)} className={darkMode ? 'toggle-dark' : 'toggle-light'}>\n          <img src=\"https://image.flaticon.com/icons/svg/1164/1164954.svg\" width=\"224\" height=\"224\" alt=\"Sun free icon\" title=\"Light Mode\"/>\n          <img src=\"https://image.flaticon.com/icons/svg/2033/2033921.svg\" width=\"224\" height=\"224\" alt=\"Moon free icon\" title=\"Dark Mode\"/>\n        </ToggleContainer>\n      </div>\n      <div className={darkMode ? 'footer-dark' : 'footer-light'} style={{fontSize: largeText ? '30px': '20px'}}>\n        <h1>Footer</h1>\n        <Button color=\"inherit\" className='footer-button' onClick={() => setDialogOpen(true)}>Show legal information</Button>\n      </div>\n      <Dialog open={dialogOpen} keepMounted onClose={() => setDialogOpen(false)} >\n        <DialogTitle>Legal Information</DialogTitle>\n        <DialogContent>\n          <p>Information goes here</p>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDialogOpen(false)} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nconst ToggleContainer = styled.button`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  background: ${({ theme }) => theme.gradient};\n  width: 8rem;\n  height: 3.5rem;\n  margin: 0 auto;\n  border-radius: 30px;\n  border: 2px solid ${({ theme }) => theme.toggleBorder};\n  font-size: 0.5rem;\n  padding: 0.5rem;\n  overflow: hidden;\n  cursor: pointer;\n\n  img {\n    max-width: 2.5rem;\n    height: auto;\n    transition: all 0.3s linear;\n\n    &:first-child {\n      transform: ${({ lightTheme }) => lightTheme ? 'translateY(0)' : 'translateY(100px)'};\n    }\n\n    &:nth-child(2) {\n      transform: ${({ lightTheme }) => lightTheme ? 'translateY(-100px)' : 'translateY(0)'};\n    }\n  }\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}